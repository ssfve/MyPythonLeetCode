class Solution(object):
    def removeDuplicates(self, A):
        """
        :type nums: List[int]
        :rtype: int
        """
        
        """
        delete is easy in linked list   no extra array constant memory
        """
        # O(n)   and O(1)
        """
        if not A:
            return 0

        newTail = 0

        for i in range(1, len(A)):
            if A[i] != A[newTail]:
                newTail += 1
                A[newTail] = A[i]

        return newTail + 1
        """
        # the set approach use extra memory
        temp = set([])
        for item in A:
            temp.add(item)
         
        A_len = len(list(temp)) 
        temp_1 = list(temp)
        temp_1.sort()
        A[0:A_len] = temp_1
        return len(temp_1)
        
        
        """
        if list_len < 2:
            return list_len
            
        p = 0
        q = 1
        while q < list_len:
            if nums[q] == nums[p]:
                q = q + 1
            else:
                nums = nums[0:p] + nums[q:list_len+1]
                list_len = len(nums)
                p = q - 1
        """
        #return nums
                
            
        
            
        
