class Solution(object):
    def divide(self, dividend, divisor):
        """
        :type dividend: int
        :type divisor: int
        :rtype: int
        """
        #Divide two integers without using multiplication, division and mod operator.
        #If it is overflow, return MAX_INT. 
        # so we are using shift to do dividing
        # INT_MAX is 2 ^ 31 = 2147483647
        # 32 bit system
        # unsigned bit 0 ~ 2^32
        INT_MAX = 2147483647
        
        # case 0
        if divisor == 0:
            return INT_MAX
        
        # case negative
        neg = dividend > 0 and divisor < 0 or dividend < 0 and divisor > 0
        
        
        a, b = abs(dividend), abs(divisor)
        ans, shift = 0, 31
        
        # divide 31 times
        # doing decimal divide doing binary divide
        while shift >= 0:
            # enlarge b 2^31 times if a is bigger there must be 2^31 bs
            if a >= b << shift:
                a -= b << shift
                # binary
                ans += 1 << shift
            shift -= 1
        
        if neg:
            ans = - ans
            
        # if ans is bigger than INT_MAX overflows return INT_MAX
        if ans > INT_MAX:
            return INT_MAX
        return ans
        
        
