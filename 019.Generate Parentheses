class Solution(object):
    #def generateParenthesis(self, n):
    """
        :type n: int
        :rtype: List[str]
    """
    # looks like a decision tree left node right node
    # what is different is where the node is
    # definitely use recursive
    #(3,3)              
    #(2,3)  (           #(3,2)  )   return
    #(1,3)  ((                                                                  #(2,2)  ()
    #(0,3)  (((         #(1,2)  (()                                             #(1,2)  ()(     #(2,1)   ())    return
    #(0,2)  ((()        #(0,2)  (()(     #(1,1)  (())                           #(0,2)  ()((    #(1,1)   ()()
    #(0,1)  ((())       #(0,1)  (()()    #(0,1)  (())(   #(1,0)  (()))  return  #(0,1)  ()(()   #(0,1)   ()()(  #(1,0) ()())    return
    #(0,0)  ((()))      #(0,0)  (()())   #(0,0)  (())()                         #(0,0)  ()(())  #(0,0)   ()()()
    # total 5 solutions
    """
    def helpler(self, l, r, item, res):
        if r < l:
            return
        if l == 0 and r == 0:
            res.append(item)
            
            
        # will do both two recursives if condition satisfy
        # left decision   pass or fail    fail means no more left parentheses left
        if l > 0:
            self.helpler(l - 1, r, item + '(', res)
        # right decision  pass or fail
        if r > 0:
            self.helpler(l, r - 1, item + ')', res)
    
    def generateParenthesis(self, n):
        if n == 0:
            return []
        res = []
        
        # n left parentheses n right parentheses
        self.helpler(n, n, '', res)
        return res
    """
    # count the number of left parentheses and then add to set to emliminate duplicates
    def generateParenthesis(self, n):
        t =set([])
        if n==0:
            t.add('')
        else:
            # pre is a set
            pre = self.generateParenthesis(n-1)
            for a in pre:
                for i in range(len(a)):
                    if a[i] == '(':
                        temp_1 = a[0:i+1]
                        temp_2 = a[i+1:len(a)]
                        new_str = temp_1 + '()' + temp_2
                        t.add(new_str)
                t.add('()'+a)
                    
        return list(t)
        
